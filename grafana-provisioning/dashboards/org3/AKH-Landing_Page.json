{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 80,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "description": "",
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "\n\n<a href=\"https://www.ncinga.net\" style=\"float:right,back\">\n      <img src=\"https://storage.googleapis.com/ncinga-iot-bucket/.png\" alt=\"\"style=\"height:125px;\">\n  </a>\n",
        "mode": "html"
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#7f9e8c",
            "mode": "fixed"
          },
          "displayName": "Overall Ground Lifting Water",
          "links": [
            {
              "targetBlank": true,
              "title": "",
              "url": "https://iot.ncinga.net/grafana/d/ae277448-653a-463c-989c-f08ccb7fe6131/water-flow-meter-deep-pump?orgId=4&from=1720461600000&to=1720547999999"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ton"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 5,
        "x": 4,
        "y": 0
      },
      "id": 2,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "query": "a=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305084/tx\"  ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n |> map(fn: (r) => ({r with _value: r._value /(3600.0*1000.0) }))\n  |>sum(column: \"_value\")\n\nb=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305083/tx\"  ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n |> map(fn: (r) => ({r with _value: r._value /(3600.0*1000.0) }))\n   |>sum(column: \"_value\")\n\n  union(tables: [a, b])\n  |>sum(column: \"_value\")",
          "refId": "A"
        }
      ],
      "title": "Overall Ground Lifting Water",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#dd924f",
            "mode": "fixed"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "m3"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 5,
        "x": 9,
        "y": 0
      },
      "id": 3,
      "options": {
        "colorMode": "background_solid",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "query": "from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"totalflow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305086/tx\" ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> sum(column: \"_value\")",
          "refId": "A"
        }
      ],
      "title": "Water Consumption ",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#b4a194",
            "mode": "fixed"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#b4a194",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "m3"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 5,
        "x": 14,
        "y": 0
      },
      "id": 4,
      "options": {
        "colorMode": "background_solid",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "query": "from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305091/tx\" ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n |> map(fn: (r) => ({r with _value: r._value /(3600.0) }))\n  |> sum(column: \"_value\")",
          "refId": "A"
        }
      ],
      "title": "ETP Inlet Water Consumption",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#445b8e",
            "mode": "fixed"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#b4a194",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "m3"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 5,
        "x": 19,
        "y": 0
      },
      "id": 80,
      "options": {
        "colorMode": "background_solid",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "query": "from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305095/tx\" ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> map(fn: (r) => ({r with _value: r._value /(3600.0) }))\n  |> sum(column: \"_value\")",
          "refId": "A"
        }
      ],
      "title": "ETP Outlet Water Consumption",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "description": "",
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 4
      },
      "id": 83,
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "\n\n<a href=\"https://iot.ncinga.net/grafana/d/bdaa5bea-518b-4302-82e6-fa8a73ca1d21/steam-flow-meter?orgId=2\" style=\"float:right,back\">\n      <img src=\"https://storage.googleapis.com/ncinga-iot-bucket/boiler.png\" alt=\"\"style=\"height:130px;width:300px\";>\n  </a>\n<h4 style=\"text-align: center;margin-top:10px;font-family:steam-flow-meter?orgId;\"> Steam Boiler </h4>",
        "mode": "html"
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "transparent",
            "mode": "fixed"
          },
          "decimals": 1,
          "fieldMinMax": false,
          "links": [
            {
              "targetBlank": true,
              "title": "",
              "url": "https://iot.ncinga.net/grafana/d/ec59cf43-a25e-4403-9460-ef2d5296e679/sustainability-dashboard?orgId=2"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 17,
        "w": 20,
        "x": 4,
        "y": 7
      },
      "id": 82,
      "links": [
        {
          "targetBlank": true,
          "title": "",
          "url": "https://iot.ncinga.net/grafana/d/ec59cf43-a25e-4403-9460-ef2d5296e679/sustainability-dashboard?orgId=2"
        }
      ],
      "options": {
        "inlineEditing": false,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "https://storage.googleapis.com/ncinga-iot-bucket/cb.png",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "field": "Value",
                  "fixed": "#D9D9D9"
                },
                "size": "fill"
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "#ffffff"
                },
                "size": 70,
                "text": {
                  "field": "Value",
                  "fixed": "",
                  "mode": "field"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "center",
                "vertical": "center"
              },
              "name": "Element 1",
              "placement": {
                "height": 100.98958587646484,
                "left": 117.50520324707031,
                "top": 4.505207061767578,
                "width": 151.98959350585938
              },
              "type": "metric-value"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "#ffffff"
                },
                "size": 40,
                "text": {
                  "fixed": "t-CO2 (eq)"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "center",
                "vertical": "center"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": -78,
                "top": -3.0029296875,
                "width": 235
              },
              "type": "text"
            }
          ],
          "name": "Element 1709872730817",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "query": "gG1=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => (r[\"power_analyze\"]==\"gasgen1\") )\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n   |> map(fn: (r) => ({r with _value: r._value /1000.00 * 0.53/1000.0}))\n\n  gG2=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => r[\"power_analyze\"]==\"gG2\")\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n   |> map(fn: (r) => ({r with _value: r._value /1000.00 * 0.53/1000.0}))\n\n  SB1=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305084/tx\"  ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n |> map(fn: (r) => ({r with _value: r._value /(3600.0) }))\n  |>sum(column: \"_value\")\n   |> map(fn: (r) => ({r with _value: r._value * 0.5/1000.0}))\n\nSB2=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"flow\")\n  |> filter(fn: (r) => (r[\"topic\"] == \"tn/emr/TN2305083/tx\"  ))\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> drop(columns: [\"_time\", \"tag\"])\n |> map(fn: (r) => ({r with _value: r._value /(3600.0) }))\n |>sum(column: \"_value\")\n |> map(fn: (r) => ({r with _value: r._value * 0.5/1000.0}))\n\nDG1=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => (r[\"power_analyze\"]==\"digen1\") )\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n     |> map(fn: (r) => ({r with _value: r._value/1000.0 * 0.839/1000.0}))\n\n  DG2=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => r[\"power_analyze\"]==\"digen2\")\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n     |> map(fn: (r) => ({r with _value: r._value/1000.0 * 0.839/1000.0}))\n\nRB1=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => (r[\"power_analyze\"]==\"reb1\") )\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n   |> map(fn: (r) => ({r with _value: r._value/1000.0 * 0.575/1000.0}))\n\n  RB2=from(bucket: \"EPIC\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> filter(fn: (r) => r[\"customer\"] == \"NCING\")\n  |> filter(fn: (r) => r[\"group\"] == \"EPIC\")\n  |> filter(fn: (r) => r[\"_field\"] == \"E\")\n  |> filter(fn: (r) => r[\"power_analyze\"]==\"reb2\")\n  |> group(columns: [\"customer\"])\n  |> drop(columns: [\"_measurement\", \"tag\"])\n  |> drop(columns: [\"_field\", \"tag\"])\n  |> drop(columns: [\"_start\", \"tag\"])\n  |> drop(columns: [\"_stop\", \"tag\"])\n  |> drop(columns: [\"customer\", \"tag\"])\n  |> drop(columns: [\"device\", \"tag\"])\n  |> drop(columns: [\"group\", \"tag\"])\n  |> drop(columns: [\"panel_board\", \"tag\"])\n  |> drop(columns: [\"power_analyze\", \"tag\"])\n  |> drop(columns: [\"topic\", \"tag\"])\n  |> drop(columns: [\"utility_type\", \"tag\"])\n  |> difference(nonNegative: true)\n  |> drop(columns: [\"_time\", \"tag\"])\n  |> sum(column: \"_value\")\n   |> map(fn: (r) => ({r with _value: r._value/1000.0 * 0.575/1000.0}))\n\n\n\n  union(tables: [gG1,gG2,SB1,SB2,DG1,DG2,RB1,RB2])\n|> sum(column: \"_value\")\n|> rename(fn: (column) => {_newColumnName = if column =~ /^_/ then \"\" else column return _newColumnName})",
          "refId": "A"
        }
      ],
      "title": "Daily Plant Carbon Footprint",
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "description": "",
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 9
      },
      "id": 84,
      "links": [
        {
          "targetBlank": true,
          "title": "",
          "url": "https://iot.ncinga.net/grafana/d/ae277448-653a-463c-989c-f08ccb7fe613/water-flow-meter"
        }
      ],
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "\n\n<a href=\"https://iot.ncinga.net/grafana/d/ae277448-653a-463c-989c-f08ccb7fe613/water-flow-meter\" style=\"float:right,back\">\n      <img src=\"https://storage.googleapis.com/ncinga-iot-bucket/outlet.png\" alt=\"\"style=\"height:130px;width:300px\";>\n  </a>\n<h4 style=\"text-align: center;margin-top:10px;font-family:steam-flow-meter?orgId;\"> ETP Outlet </h4>",
        "mode": "html"
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "description": "",
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 14
      },
      "id": 85,
      "links": [
        {
          "targetBlank": true,
          "title": "",
          "url": "https://iot.ncinga.net/grafana/d/ec59cf43-a25e-4403-9460-ef2d5296e677/compressor?orgId=2"
        },
        {
          "targetBlank": true,
          "title": "",
          "url": "https://iot.ncinga.net/grafana/d/fe2a78f3-a70b-40c2-8479-d62b0eb769a6/power-analyzer?orgId=2&var-power_analyser=gasgen1"
        }
      ],
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "\n\n<a href=\"https://iot.ncinga.net/grafana/d/fe2a78f3-a70b-40c2-8479-d62b0eb769a6/power-analyzer?orgId=2&var-power_analyser=gasgen1\" style=\"float:right,back\">\n      <img src=\"https://storage.googleapis.com/ncinga-iot-bucket/generator.png\" alt=\"\"style=\"height:130px;width:300px\";>\n  </a>\n<h4 style=\"text-align: center;margin-top:10px;font-family:steam-flow-meter?orgId;\"> Generator </h4>",
        "mode": "html"
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
      },
      "description": "",
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 0,
        "y": 19
      },
      "id": 86,
      "links": [],
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "\n\n<a href=\"https://iot.ncinga.net/grafana/d/ec59cf43-a25e-4403-9460-ef2d5296e677/compressor?orgId=2\" style=\"float:right,back\">\n      <img src=\"https://storage.googleapis.com/ncinga-iot-bucket/com.jpg\" alt=\"\"style=\"height:130px;width:300px\";>\n  </a>\n<h4 style=\"text-align: center;margin-top:10px;font-family:steam-flow-meter?orgId;\">Air Compressor </h4>",
        "mode": "html"
      },
      "pluginVersion": "10.2.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "d20a60a6-f1f7-4218-be5c-0556f6667f1b"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now/d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Landing Page",
  "uid": "cf5546ad-8bcf-41b4-9bc9-34a64d882e992",
  "version": 6,
  "weekStart": ""
}